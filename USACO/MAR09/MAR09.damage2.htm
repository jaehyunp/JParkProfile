<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<TITLE>USACO MAR09 damage2 해설</TITLE> </HEAD><BODY bgcolor="#FFFFFF">
<CENTER><IMG src="./../cow1.jpg" width="742" height="118"></CENTER>
<H2>USACO MAR09 문제 &#39;damage2&#39; 해설</H2>
<H4>해설: 박재현</H4>
<p>영문 해설로 <a href="http://ace.delos.com/TESTDATA/MAR09.damage2.htm">돌아가기</a></p>

<p>이 문제에서 우리는 주어진 목장들과 헛간 사이의 이동을 막기 위해서 파괴되어야 할 최소 목초지 개수를 
구해야 합니다. 직관적인 방법은 maximum flow 알고리즘을 이용하는 것입니다. 그래프의 max-flow는 그 
그래프의 min-cut과 같기 때문입니다. 하지만 문제는 목초지 사이의 길(에지)을 파괴하는 것은 불가능하고 오직 
목초지(노드)만 파괴할 수 있다는 것입니다.</p>

<p>이와 같은 형태의 min-cut 문제는 각 노드를 upper 노드와 lower 노드로 쪼개서 풀 수 있습니다. 
네트워크 그래프는 아래와 같은 방법으로 구성합니다.
<ul>
<li>각 노드를 upper 노드와 lower 노드로 쪼개고, upper 노드에서 lower 노드로 가는 용량 1인 간선을 
만듭니다.</li>
<li>주어진 양방향 간선 (u, v)에 대해서, 용량이 무한대인 두 개의 단방향 간선 (L_u, U_v), (L_v, U_u)을 만듭니다. 
여기서 L_i는 i의 lower 노드를 가리키고, U_i는 i의 upper 노드를 가리킵니다. 이 문제에서는 용량이 무한대인 
간선을 만들 필요 없이 모든 간선이 1만의 용량을 갖도록 해도 되는데, 이는 lower 노드에 들어올 수 있는 
flow의 최대값이 1이기 때문에 가능합니다 (단, 아래에서 설명할 source 노드의 경우는 예외인데, 문제에서 
주어진 목장들은 헛간과 직접 연결되어 있지 않으므로 이 또한 별로 문제될 것이 없습니다).
</li>
</ul>

네트워크 그래프를 그림으로 그려 보면 훨씬 더 쉽게 이해할 수 있을 것입니다 (실제로 두 개의 층으로 
구분지어 그리면 더 좋습니다).</p>

<p>네트워크의 source 노드는 헛간의 lower 노드가 됩니다. 마지막으로, 주어진 모든 목장들의 upper 노드를 
가상의 sink 노드에 연결합니다. 이 네트워크에 max-flow 알고리즘을 사용하면 답을 구함은 물론 파괴되어야 
할 목초지의 인덱스까지 계산할 수 있습니다.</p>

<pre>
//damage2 by Jaehyun Park

#include&lt;stdio.h&gt;
#include&lt;memory.h&gt;
#define PROBNAME "damage2"

#define UPPER(x) (((x)&lt;&lt;1)-1)
#define LOWER(x) ((x)&lt;&lt;1)
#define SOURCE (LOWER(1))
#define MAXN 3000
#define MAXM 20000
#define MAXNODE (MAXN&lt;&lt;1)
#define MAXEDGE ((MAXN+(MAXM&lt;&lt;1))&lt;&lt;1)

struct edge
{
	int endpoint, next_edge, back_edge;
	bool avail;
};

FILE *ifp=fopen(PROBNAME".in", "r"), *ofp=fopen(PROBNAME".out", "w");

int P, C, N;
int start_pointer[MAXNODE+1];
edge e[MAXEDGE+1];
int edge_count;

bool sink[MAXNODE+1];
bool visited[MAXNODE+1];

bool Find_Path(int x)
{
	if(sink[x]) return true;
	visited[x]=true;
	int k;
	for(k=start_pointer[x];k;k=e[k].next_edge)
	{
		if(visited[e[k].endpoint] || !e[k].avail) continue;
		if(Find_Path(e[k].endpoint))
		{
			e[k].avail=false; e[e[k].back_edge].avail=true;
			return true;
		}
	}
	return false;
}

int Max_Flow()
{
	int flow;
	for(flow=0;;flow++)
	{
		memset(visited, false, sizeof(visited));
		if(!Find_Path(SOURCE)) break;
	}
	return flow;
}

void Make_Edge(int a, int b)
{
	e[++edge_count].endpoint=b;
	e[edge_count].next_edge=start_pointer[a];
	e[edge_count].avail=true; e[edge_count].back_edge=edge_count+1;
	start_pointer[a]=edge_count;
	
	e[++edge_count].endpoint=a;
	e[edge_count].next_edge=start_pointer[b];
	e[edge_count].avail=false; e[edge_count].back_edge=edge_count-1;
	start_pointer[b]=edge_count;
}

void INPUT()
{
	int i;
	int a, b;
	int report;
	fscanf(ifp, "%d%d%d", &P, &C, &N);
	for(i=1;i&lt;=P;i++) Make_Edge(UPPER(i), LOWER(i));
	for(i=1;i&lt;=C;i++)
	{
		fscanf(ifp, "%d%d", &a, &b);
		Make_Edge(LOWER(a), UPPER(b));
		Make_Edge(LOWER(b), UPPER(a));
	}
	for(i=1;i&lt;=N;i++)
	{
		fscanf(ifp, "%d", &report);
		sink[UPPER(report)]=true;
	}
}

void OUTPUT()
{
	fprintf(ofp, "%d\n", Max_Flow());
}

void CLOSE_FILES()
{
	fclose(ifp); fclose(ofp);
}

int main()
{
	INPUT();
	OUTPUT();
	CLOSE_FILES();
	return 0;
}

</pre>

</BODY></HTML>