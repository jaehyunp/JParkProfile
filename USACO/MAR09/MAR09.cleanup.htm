<HTML><HEAD><META http-equiv="Content-Type" content="text/html; charset=EUC-KR">
<TITLE>USACO MAR09 cleanup 해설</TITLE> </HEAD><BODY bgcolor="#FFFFFF">
<CENTER><IMG src="./../cow1.jpg" width="742" height="118"></CENTER>
<H2>USACO MAR09 문제 &#39;cleanup&#39; 해설</H2>
<H4>해설: 박재현</H4>
<p>영문 해설로 <a href="http://ace.delos.com/TESTDATA/MAR09.cleanup.htm">돌아가기</a></p>

<p>이 문제는 1차원 DP 문제입니다. D[i]를 1부터 i까지의 목장을 치우는 데 걸리는 시간으로 정의합니다. 
그러면 D[i]는 0 <= k < i인 모든 k에 대해 D[k]+t(k+1, i)^2의 값들 중 최소값이 됩니다. 단, 여기서 
t(s, e)는 s부터 e까지의 소들이 가지는 음식 선호도의 서로 다른 값들의 개수를 의미합니다. 
이 알고리즘의 시간복잡도는 O(N^2)인데, 주어진 문제를 해결하기에는 비효율적입니다.</p>

<p>가장 중요한 포인트는 한 구간 내에 서로 다른 숫자들이 최대 sqrt(N)가지 나올 수 있다는 것입니다. 
만약 그보다 많은 종류의 수들이 구간 내에 나타나면 그 구간을 처리하는 데 걸리는 시간은 최소 N인데, 
시간이 N이 되는 방법을 항상 찾을 수 있으므로 이를 쉽게 증명할 수 있습니다 (전체 그룹을 
하나의 원소만을 가지는 구간들로 분리하면 걸리는 시간이 N이 됩니다).</p>

<p>또 한 가지 요점은, 만약 두 개의 구간이 같은 종류의 서로 다른 숫자를 가지고 있고, 끝점이 
같다면 항상 길이가 긴 구간을 이용하는 것이 유리하다는 것입니다. 이는 i가 증가함에 따라 D[i] 또한 
증가한다는 사실로부터 쉽게 알 수 있습니다.</p>

<p>위의 두 가지 사실을 이용하면 매 i마다 D[i]의 값을 계산하기 위해서 최대 sqrt(N)개의 구간만 
고려하면 된다는 결론을 낼 수 있습니다. 그렇게 하기 위해 sqrt(N)의 크기를 가지는 또 다른 배열을 하나 
사용하는데, 이 배열의 k번째 원소는 i를 끝점으로 하는 구간이 k개의 서로 다른 숫자들을 가질 때 왼쪽으로 
얼마나 뻗어나갈 수 있는지를 저장합니다. 이를 유지하는 데 드는 시간은 매 i마다 O(sqrt(N))입니다. 따라서 
전체 프로그램의 시간복잡도는 O(N^1.5)가 되고, 주어진 시간 제한 내에 문제를 해결할 수 있게 됩니다. 
자세한 구현 방법은 아래의 샘플 솔루션을 참조하기 바랍니다.</p>

<pre>
//cleanup by Jaehyun Park

#include&lt;stdio.h&gt;
#define PROBNAME "cleanup"
#define min(a, b) (((a)&lt;(b))?(a):(b))
#define sqr(x) ((x)*(x))
int N, M;
int P[40001];
int last_occurrence[40001];
int min_index[201], min_index_size;
int d[40001];
FILE *ifp=fopen(PROBNAME".in", "r"), *ofp=fopen(PROBNAME".out", "w");
void INPUT()
{
	int i;
	fscanf(ifp, "%d%d", &N, &M);
	for(i=1;i&lt;=N;i++) fscanf(ifp, "%d", &P[i]);
	P[0]=-1;
}
void PROCESS()
{
	int i, j, k;
	for(i=1;i&lt;=M;i++) last_occurrence[i]=-1;
	for(min_index_size=1;sqr(min_index_size)&lt;=N;min_index_size++);
	min_index_size--; min_index[0]=1;
	for(i=1;i&lt;=N;i++)
	{
		k=last_occurrence[P[i]];
		for(j=0;j&lt;=min_index_size && min_index[j]-1!=k;j++);
		for(j--;j&gt;=0;j--) min_index[j+1]=min_index[j];
		min_index[0]=i+1;
		d[i]=i;
		for(j=1;j&lt;=min_index_size;j++)
			d[i]=min(d[i], d[min_index[j]-1]+sqr(j));
		last_occurrence[P[i]]=i;
	}
}
void OUTPUT()
{
	fprintf(ofp, "%d\n", d[N]);
}
void CLOSE_FILES()
{
	fclose(ifp); fclose(ofp);
}
int main()
{
	INPUT();
	PROCESS();
	OUTPUT();
	CLOSE_FILES();
	return 0;
}
</pre>

</BODY></HTML>